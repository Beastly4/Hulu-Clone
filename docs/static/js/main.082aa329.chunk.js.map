{"version":3,"sources":["Header.js","requests.js","Nav.js","FilmCard.js","Films.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","API_KEY","fetchTrending","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchMystery","fetchSciFi","fetchWestern","fetchAnimation","fetchTV","Nav","setSelectedOption","onClick","requests","FilmCard","forwardRef","ref","setMovies","movie","movies","backdrop_path","poster_path","line","element","truncateText","text","overview","title","original_name","release_date","first_air_date","vote_count","Films","selectedOption","useState","useEffect","a","axios","get","request","data","results","fetchData","map","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.082aa329.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\";\r\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport LiveTvIcon from \"@material-ui/icons/LiveTv\";\r\nimport VideoLibraryIcon from \"@material-ui/icons/VideoLibrary\";\r\nimport PersonOutlineIcon from \"@material-ui/icons/PersonOutline\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header__icons\">\r\n        <div className=\"header__icon header__icon--active\">\r\n          <HomeIcon />\r\n          <p>Home</p>\r\n        </div>\r\n        <div className=\"header__icon\">\r\n          <FlashOnIcon />\r\n          <p>Trending</p>\r\n        </div>\r\n        <div className=\"header__icon\">\r\n          <LiveTvIcon />\r\n          <p>Verified</p>\r\n        </div>\r\n        <div className=\"header__icon\">\r\n          <VideoLibraryIcon />\r\n          <p>Collections</p>\r\n        </div>\r\n        <div className=\"header__icon\">\r\n          <SearchIcon />\r\n          <p>Search</p>\r\n        </div>\r\n        <div className=\"header__icon\">\r\n          <PersonOutlineIcon />\r\n          <p>Account</p>\r\n        </div>\r\n      </div>\r\n      <img className=\"header__logo\" src=\"/images/hulu.svg\" alt=\"Hulu\"></img>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","const API_KEY = \"96c91d6ef15f0c4d25635c23cb2103c5\";\r\n\r\nexport default {\r\n  fetchTrending: `https://api.themoviedb.org/3/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchTopRated: `https://api.themoviedb.org/3/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchMystery: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=9648`,\r\n  fetchSciFi: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=878`,\r\n  fetchWestern: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=37`,\r\n  fetchAnimation: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=16`,\r\n  fetchTV: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=10770`,\r\n};\r\n","import React from \"react\";\r\nimport \"./Nav.css\";\r\nimport requests from \"./requests\";\r\n\r\nfunction Nav({ setSelectedOption }) {\r\n  return (\r\n    <div className=\"nav\">\r\n      <h2 onClick={() => setSelectedOption(requests.fetchTrending)}>\r\n        Trending\r\n      </h2>\r\n      <h2 onClick={() => setSelectedOption(requests.fetchTopRated)}>\r\n        Top Rated\r\n      </h2>\r\n      <h2 onClick={() => setSelectedOption(requests.fetchActionMovies)}>\r\n        Action\r\n      </h2>\r\n      <h2 onClick={() => setSelectedOption(requests.fetchComedyMovies)}>\r\n        Comedy\r\n      </h2>\r\n      <h2 onClick={() => setSelectedOption(requests.fetchHorrorMovies)}>\r\n        Horror\r\n      </h2>\r\n      <h2 onClick={() => setSelectedOption(requests.fetchRomanceMovies)}>\r\n        Romance\r\n      </h2>\r\n      <h2 onClick={() => setSelectedOption(requests.fetchMystery)}>Mystery</h2>\r\n      <h2 onClick={() => setSelectedOption(requests.fetchSciFi)}>Sci-Fi</h2>\r\n      <h2 onClick={() => setSelectedOption(requests.fetchWestern)}>Western</h2>\r\n      <h2 onClick={() => setSelectedOption(requests.fetchAnimation)}>\r\n        Animation\r\n      </h2>\r\n      <h2 onClick={() => setSelectedOption(requests.fetchTV)}>Tv Movie</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { forwardRef } from \"react\";\r\nimport \"./FilmCard.css\";\r\nimport TextTruncate from \"react-text-truncate\";\r\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original\";\r\n\r\nconst FilmCard = forwardRef(({ setMovies, movie, movies }, ref) => {\r\n  return (\r\n    <div ref={ref} className=\"filmCard\">\r\n      <img\r\n        src={`${base_url}${movie.backdrop_path || movie.poster_path}`}\r\n        alt=\"\"\r\n      ></img>\r\n      <TextTruncate\r\n        line={1}\r\n        element=\"p\"\r\n        truncateText=\"...\"\r\n        text={movie.overview}\r\n      />\r\n      <h2>{movie.title || movie.original_name}</h2>\r\n      <p className=\"filmCard__about\">\r\n        {/* <p className=\"filmCard__about__item\">{movie.media_type && `${movie.media_type}`}</p> */}\r\n        <p className=\"filmCard__about__item\">\r\n          {movie.release_date || movie.first_air_date}\r\n        </p>\r\n        <p\r\n          className=\"filmCard__about__item\"\r\n          onClick={() => {\r\n            movie.vote_count++;\r\n            setMovies([...movies]);\r\n          }}\r\n        >\r\n          <ThumbUpIcon />\r\n        </p>\r\n        <p className=\"filmCard__about__item\">{movie.vote_count}</p>\r\n      </p>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default FilmCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Films.css\";\r\nimport FilmCard from \"./FilmCard\";\r\nimport axios from \"axios\";\r\nimport FlipMove from \"react-flip-move\";\r\n\r\nfunction Films({ selectedOption }) {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(selectedOption);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n\r\n    fetchData();\r\n  }, [selectedOption]);\r\n\r\n  return (\r\n    <div className=\"films\">\r\n      <FlipMove>\r\n        {movies.map((movie) => {\r\n          return (\r\n            <FilmCard\r\n              setMovies={setMovies}\r\n              movies={movies}\r\n              key={movie.id}\r\n              movie={movie}\r\n            />\r\n          );\r\n        })}\r\n      </FlipMove>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Films;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Nav from \"./Nav\";\nimport Films from \"./Films\";\nimport requests from \"./requests\";\n\nfunction App() {\n  const [selectedOption, setSelectedOption] = useState(requests.fetchTrending);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Nav setSelectedOption={setSelectedOption} />\n      <Films selectedOption={selectedOption} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}